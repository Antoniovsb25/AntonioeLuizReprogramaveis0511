
teste1.elf:     file format elf32-littlenios2
teste1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000614 memsz 0x00000614 flags r-x
    LOAD off    0x00001634 vaddr 0x00010634 paddr 0x0001063c align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x00001644 vaddr 0x00010644 paddr 0x00010644 align 2**12
         filesz 0x00000000 memsz 0x00000024 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000614  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rwdata       00000008  00010634  0001063c  00001634  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  3 .bss          00000024  00010644  00010644  00001644  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001668  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002af  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000cd3  00000000  00000000  00001a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000062c  00000000  00000000  00002772  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000019e6  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00004784  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000608  00000000  00000000  00004a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000404  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000040  00000000  00000000  00005410  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00005450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  000063d5  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000f  00000000  00000000  000063d8  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  000063e7  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000063e8  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000e  00000000  00000000  000063e9  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000e  00000000  00000000  000063f7  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000e  00000000  00000000  00006405  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000d  00000000  00000000  00006413  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000033  00000000  00000000  00006420  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0004a472  00000000  00000000  00006453  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00010634 l    d  .rwdata	00000000 .rwdata
00010644 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00010646 l     O .bss	00000001 contador.1662
0001064c l     O .bss	00000002 c_timer1.1637
0001064a l     O .bss	00000002 c_timer2.1638
00010648 l     O .bss	00000002 c_timer3.1639
00000000 l    df *ABS*	00000000 alt_load.c
00010334 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000104b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000103c0 g     F .text	0000002c alt_main
0001005c g     F .text	00000150 f_maq
0001064e g     O .bss	00000002 max_timer3
0001063c g       *ABS*	00000000 __flash_rwdata_start
00010644 g     O .bss	00000001 dz
000101d4 g     F .text	0000003c f_timer2
00010650 g     O .bss	00000001 ledg
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010660 g     O .bss	00000004 alt_argv
00018634 g       *ABS*	00000000 _gp
000103ec g     F .text	00000004 usleep
00010304 g     F .text	0000001c loop
00010634 g     O .rwdata	00000001 estado
000105ec g     F .text	00000008 __udivsi3
00010668 g       *ABS*	00000000 __bss_end
000101ac g     F .text	00000028 f_timer3
000104a0 g     F .text	00000004 alt_dcache_flush_all
00010652 g     O .bss	00000002 max_timer2
00010654 g     O .bss	00000002 max_timer1
0001063c g       *ABS*	00000000 __ram_rwdata_end
00010634 g       *ABS*	00000000 __ram_rodata_end
000105f4 g     F .text	00000008 __umodsi3
00010668 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
000103f0 g     F .text	00000004 alt_sys_init
000105fc g     F .text	00000038 __mulsi3
00010634 g       *ABS*	00000000 __ram_rwdata_start
00010634 g       *ABS*	00000000 __ram_rodata_start
00010414 g     F .text	0000008c alt_busy_sleep
00010668 g       *ABS*	00000000 __alt_stack_base
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_avsb
00010210 g     F .text	0000003c f_timer1
00010644 g       *ABS*	00000000 __bss_start
00010320 g     F .text	00000014 main
00010664 g     O .bss	00000004 alt_envp
00010656 g     O .bss	00000001 key
0001052c g     F .text	00000060 __divsi3
00010634 g       *ABS*	00000000 __flash_rodata_start
000103f4 g     F .text	00000020 alt_irq_init
0001065c g     O .bss	00000004 alt_argc
00010657 g     O .bss	00000001 sw
000102d0 g     F .text	00000034 setup
00010658 g     O .bss	00000001 ledr
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010638 g     O .rwdata	00000004 jtag_uart_avsb
0001063c g       *ABS*	00000000 _edata
00010668 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
000104a8 g     F .text	00000008 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
0001058c g     F .text	00000060 __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
000104a4 g     F .text	00000004 alt_icache_flush_all
0001024c g     F .text	00000084 f_timers
00010354 g     F .text	0000006c alt_load
00010645 g     O .bss	00000001 un



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a18d14 	ori	gp,gp,34356
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10819114 	ori	r2,r2,1604

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c19a14 	ori	r3,r3,1640

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00103540 	call	10354 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00103c00 	call	103c0 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <f_maq>:
	LAT(LEDR_AVSB_BASE, ledr);
}

unsigned char f_maq(alt_u8 atual){
	alt_u8 prox_est;
	switch(atual){
   1005c:	213fff84 	addi	r4,r4,-2
   10060:	21003fcc 	andi	r4,r4,255
   10064:	008006c4 	movi	r2,27
   10068:	11004a36 	bltu	r2,r4,10194 <f_maq+0x138>
   1006c:	2105883a 	add	r2,r4,r4
   10070:	1085883a 	add	r2,r2,r2
   10074:	00c00074 	movhi	r3,1
   10078:	18c02204 	addi	r3,r3,136
   1007c:	10c5883a 	add	r2,r2,r3
   10080:	10800017 	ldw	r2,0(r2)
   10084:	1000683a 	jmp	r2
   10088:	000100f8 	rdprs	zero,zero,1027
   1008c:	00010104 	movi	zero,1028
   10090:	00010194 	movui	zero,1030
   10094:	00010118 	cmpnei	zero,zero,1028
   10098:	00010194 	movui	zero,1030
   1009c:	00010124 	muli	zero,zero,1028
   100a0:	00010194 	movui	zero,1030
   100a4:	00010194 	movui	zero,1030
   100a8:	00010194 	movui	zero,1030
   100ac:	00010138 	rdprs	zero,zero,1028
   100b0:	00010194 	movui	zero,1030
   100b4:	00010144 	movi	zero,1029
   100b8:	00010194 	movui	zero,1030
   100bc:	00010194 	movui	zero,1030
   100c0:	00010194 	movui	zero,1030
   100c4:	00010150 	cmplti	zero,zero,1029
   100c8:	00010194 	movui	zero,1030
   100cc:	00010164 	muli	zero,zero,1029
   100d0:	00010194 	movui	zero,1030
   100d4:	00010194 	movui	zero,1030
   100d8:	00010194 	movui	zero,1030
   100dc:	00010170 	cmpltui	zero,zero,1029
   100e0:	00010194 	movui	zero,1030
   100e4:	00010194 	movui	zero,1030
   100e8:	00010194 	movui	zero,1030
   100ec:	00010194 	movui	zero,1030
   100f0:	00010194 	movui	zero,1030
   100f4:	00010188 	cmpgei	zero,zero,1030
	case 2:
			prox_est = 3;
			un = 0x4f;
			dz = 0x00;
   100f8:	00c000c4 	movi	r3,3
unsigned char f_maq(alt_u8 atual){
	alt_u8 prox_est;
	switch(atual){
	case 2:
			prox_est = 3;
			un = 0x4f;
   100fc:	008013c4 	movi	r2,79
   10100:	00000206 	br	1010c <f_maq+0xb0>
			break;

		case 3:
				prox_est = 5;
				un = 0x6d;
				dz = 0x00;
   10104:	00c00144 	movi	r3,5
			dz = 0x00;
			break;

		case 3:
				prox_est = 5;
				un = 0x6d;
   10108:	00801b44 	movi	r2,109
   1010c:	d0a00445 	stb	r2,-32751(gp)
				dz = 0x00;
   10110:	d0200405 	stb	zero,-32752(gp)
   10114:	00002306 	br	101a4 <f_maq+0x148>
				break;

		case 5:
				prox_est = 7;
				un = 0x07;
   10118:	008001c4 	movi	r2,7
				dz = 0x00;
   1011c:	1007883a 	mov	r3,r2
   10120:	003ffa06 	br	1010c <f_maq+0xb0>
				break;
		case 7:
				prox_est = 11;
				un = 0x06;
   10124:	00800184 	movi	r2,6
				dz = 0x06;
   10128:	00c002c4 	movi	r3,11
   1012c:	d0a00405 	stb	r2,-32752(gp)
				un = 0x07;
				dz = 0x00;
				break;
		case 7:
				prox_est = 11;
				un = 0x06;
   10130:	d0a00445 	stb	r2,-32751(gp)
   10134:	00001b06 	br	101a4 <f_maq+0x148>
				dz = 0x06;
				break;
		case 11:
				prox_est = 13;
				un = 0x4f;
				dz = 0x06;
   10138:	00c00344 	movi	r3,13
				un = 0x06;
				dz = 0x06;
				break;
		case 11:
				prox_est = 13;
				un = 0x4f;
   1013c:	008013c4 	movi	r2,79
   10140:	00000506 	br	10158 <f_maq+0xfc>
				dz = 0x06;
				break;
		case 13:
				prox_est = 17;
				un = 0x07;
				dz = 0x06;
   10144:	00c00444 	movi	r3,17
				un = 0x4f;
				dz = 0x06;
				break;
		case 13:
				prox_est = 17;
				un = 0x07;
   10148:	008001c4 	movi	r2,7
   1014c:	00000206 	br	10158 <f_maq+0xfc>
				dz = 0x06;
				break;
		case 17:
				prox_est = 19;
				un = 0x6f;
				dz = 0x06;
   10150:	00c004c4 	movi	r3,19
				un = 0x07;
				dz = 0x06;
				break;
		case 17:
				prox_est = 19;
				un = 0x6f;
   10154:	00801bc4 	movi	r2,111
   10158:	d0a00445 	stb	r2,-32751(gp)
				dz = 0x06;
   1015c:	00800184 	movi	r2,6
   10160:	00000706 	br	10180 <f_maq+0x124>
				break;
		case 19:
				prox_est = 23;
				un = 0x4f;
				dz = 0x5b;
   10164:	00c005c4 	movi	r3,23
				un = 0x6f;
				dz = 0x06;
				break;
		case 19:
				prox_est = 23;
				un = 0x4f;
   10168:	008013c4 	movi	r2,79
   1016c:	00000206 	br	10178 <f_maq+0x11c>
				dz = 0x5b;
				break;
		case 23:
				prox_est = 29;
				un = 0x6f;
				dz = 0x5b;
   10170:	00c00744 	movi	r3,29
				un = 0x4f;
				dz = 0x5b;
				break;
		case 23:
				prox_est = 29;
				un = 0x6f;
   10174:	00801bc4 	movi	r2,111
   10178:	d0a00445 	stb	r2,-32751(gp)
				dz = 0x5b;
   1017c:	008016c4 	movi	r2,91
   10180:	d0a00405 	stb	r2,-32752(gp)
   10184:	00000706 	br	101a4 <f_maq+0x148>
				break;
		case 29:
				prox_est = 2;
				un = 0x5b;
				dz = 0x00;
   10188:	00c00084 	movi	r3,2
				un = 0x6f;
				dz = 0x5b;
				break;
		case 29:
				prox_est = 2;
				un = 0x5b;
   1018c:	008016c4 	movi	r2,91
   10190:	003fde06 	br	1010c <f_maq+0xb0>
				dz = 0x00;
				break;

		default:
			prox_est = 2;
			un = 0x5b;
   10194:	008016c4 	movi	r2,91
   10198:	d0a00445 	stb	r2,-32751(gp)
			dz = 0x00;
   1019c:	d0200405 	stb	zero,-32752(gp)
   101a0:	00c00084 	movi	r3,2
   101a4:	18803fcc 	andi	r2,r3,255
			break;
		}
	return prox_est;
}
   101a8:	f800283a 	ret

000101ac <f_timer3>:
	ledg = contador;
	LAT(LEDG_AVSB_BASE, ledg);
}

void f_timer3(void){
	sw = PORT(SW_AVSB_BASE);
   101ac:	008000b4 	movhi	r2,2
   101b0:	10842804 	addi	r2,r2,4256
   101b4:	10800037 	ldwio	r2,0(r2)
	ledr = sw;
	LAT(LEDR_AVSB_BASE, ledr);
   101b8:	10c03fcc 	andi	r3,r2,255
	ledg = contador;
	LAT(LEDG_AVSB_BASE, ledg);
}

void f_timer3(void){
	sw = PORT(SW_AVSB_BASE);
   101bc:	d0a008c5 	stb	r2,-32733(gp)
	ledr = sw;
   101c0:	d0a00905 	stb	r2,-32732(gp)
	LAT(LEDR_AVSB_BASE, ledr);
   101c4:	008000b4 	movhi	r2,2
   101c8:	10842404 	addi	r2,r2,4240
   101cc:	10c00035 	stwio	r3,0(r2)
}
   101d0:	f800283a 	ret

000101d4 <f_timer2>:
	LAT(HEX4_AVSB_BASE, un);
}

void f_timer2(void){
	static alt_u8 contador = 0;
	if(contador<100){
   101d4:	d0a00483 	ldbu	r2,-32750(gp)
   101d8:	00c018c4 	movi	r3,99
		contador++;
   101dc:	11000044 	addi	r4,r2,1
	LAT(HEX4_AVSB_BASE, un);
}

void f_timer2(void){
	static alt_u8 contador = 0;
	if(contador<100){
   101e0:	10803fcc 	andi	r2,r2,255
   101e4:	18800236 	bltu	r3,r2,101f0 <f_timer2+0x1c>
		contador++;
   101e8:	d1200485 	stb	r4,-32750(gp)
   101ec:	00000106 	br	101f4 <f_timer2+0x20>
	}else{
		contador = 0;
   101f0:	d0200485 	stb	zero,-32750(gp)
	}
	ledg = contador;
   101f4:	d0a00483 	ldbu	r2,-32750(gp)
	LAT(LEDG_AVSB_BASE, ledg);
   101f8:	1007883a 	mov	r3,r2
	if(contador<100){
		contador++;
	}else{
		contador = 0;
	}
	ledg = contador;
   101fc:	d0a00705 	stb	r2,-32740(gp)
	LAT(LEDG_AVSB_BASE, ledg);
   10200:	008000b4 	movhi	r2,2
   10204:	10842004 	addi	r2,r2,4224
   10208:	10c00035 	stwio	r3,0(r2)
}
   1020c:	f800283a 	ret

00010210 <f_timer1>:
			f_timer3();
		}
}

void f_timer1(void){
	estado = f_maq(estado);
   10210:	d1200003 	ldbu	r4,-32768(gp)
			c_timer3=0;
			f_timer3();
		}
}

void f_timer1(void){
   10214:	deffff04 	addi	sp,sp,-4
   10218:	dfc00015 	stw	ra,0(sp)
	estado = f_maq(estado);
   1021c:	001005c0 	call	1005c <f_maq>
	//sw = PORT(SW_AVSB_BASE);
	//ledr = sw;
	//LAT(LEDR_AVSB_BASE, ledr);
	LAT(HEX5_AVSB_BASE, dz);
   10220:	d0e00403 	ldbu	r3,-32752(gp)
			f_timer3();
		}
}

void f_timer1(void){
	estado = f_maq(estado);
   10224:	d0a00005 	stb	r2,-32768(gp)
	//sw = PORT(SW_AVSB_BASE);
	//ledr = sw;
	//LAT(LEDR_AVSB_BASE, ledr);
	LAT(HEX5_AVSB_BASE, dz);
   10228:	008000b4 	movhi	r2,2
   1022c:	10841c04 	addi	r2,r2,4208
   10230:	10c00035 	stwio	r3,0(r2)
	LAT(HEX4_AVSB_BASE, un);
   10234:	d0e00443 	ldbu	r3,-32751(gp)
   10238:	10bffc04 	addi	r2,r2,-16
   1023c:	10c00035 	stwio	r3,0(r2)
}
   10240:	dfc00017 	ldw	ra,0(sp)
   10244:	dec00104 	addi	sp,sp,4
   10248:	f800283a 	ret

0001024c <f_timers>:
	usleep(1000);
}

void f_timers(void){
	static alt_u16 c_timer1=0, c_timer2=0, c_timer3=0;
	if (c_timer1<max_timer1){
   1024c:	d0a0060b 	ldhu	r2,-32744(gp)
   10250:	d0e0080b 	ldhu	r3,-32736(gp)
void loop(void){
	f_timers();
	usleep(1000);
}

void f_timers(void){
   10254:	deffff04 	addi	sp,sp,-4
	static alt_u16 c_timer1=0, c_timer2=0, c_timer3=0;
	if (c_timer1<max_timer1){
		c_timer1++;
   10258:	11000044 	addi	r4,r2,1
	usleep(1000);
}

void f_timers(void){
	static alt_u16 c_timer1=0, c_timer2=0, c_timer3=0;
	if (c_timer1<max_timer1){
   1025c:	10bfffcc 	andi	r2,r2,65535
void loop(void){
	f_timers();
	usleep(1000);
}

void f_timers(void){
   10260:	dfc00015 	stw	ra,0(sp)
	static alt_u16 c_timer1=0, c_timer2=0, c_timer3=0;
	if (c_timer1<max_timer1){
   10264:	10c0022e 	bgeu	r2,r3,10270 <f_timers+0x24>
		c_timer1++;
   10268:	d120060d 	sth	r4,-32744(gp)
   1026c:	00000206 	br	10278 <f_timers+0x2c>
	} else{
		c_timer1=0;
   10270:	d020060d 	sth	zero,-32744(gp)
		f_timer1();
   10274:	00102100 	call	10210 <f_timer1>
	}
	if (c_timer2<max_timer2){
   10278:	d0a0058b 	ldhu	r2,-32746(gp)
   1027c:	d0e0078b 	ldhu	r3,-32738(gp)
			c_timer2++;
   10280:	11000044 	addi	r4,r2,1
		c_timer1++;
	} else{
		c_timer1=0;
		f_timer1();
	}
	if (c_timer2<max_timer2){
   10284:	10bfffcc 	andi	r2,r2,65535
   10288:	10c0022e 	bgeu	r2,r3,10294 <f_timers+0x48>
			c_timer2++;
   1028c:	d120058d 	sth	r4,-32746(gp)
   10290:	00000206 	br	1029c <f_timers+0x50>
		} else{
			c_timer2=0;
   10294:	d020058d 	sth	zero,-32746(gp)
			f_timer2();
   10298:	00101d40 	call	101d4 <f_timer2>
		}
	if (c_timer3<max_timer3){
   1029c:	d0a0050b 	ldhu	r2,-32748(gp)
   102a0:	d0e0068b 	ldhu	r3,-32742(gp)
			c_timer3++;
   102a4:	11000044 	addi	r4,r2,1
			c_timer2++;
		} else{
			c_timer2=0;
			f_timer2();
		}
	if (c_timer3<max_timer3){
   102a8:	10bfffcc 	andi	r2,r2,65535
   102ac:	10c0042e 	bgeu	r2,r3,102c0 <f_timers+0x74>
			c_timer3++;
   102b0:	d120050d 	sth	r4,-32748(gp)
		} else{
			c_timer3=0;
			f_timer3();
		}
}
   102b4:	dfc00017 	ldw	ra,0(sp)
   102b8:	dec00104 	addi	sp,sp,4
   102bc:	f800283a 	ret
			f_timer2();
		}
	if (c_timer3<max_timer3){
			c_timer3++;
		} else{
			c_timer3=0;
   102c0:	d020050d 	sth	zero,-32748(gp)
			f_timer3();
		}
}
   102c4:	dfc00017 	ldw	ra,0(sp)
   102c8:	dec00104 	addi	sp,sp,4
		}
	if (c_timer3<max_timer3){
			c_timer3++;
		} else{
			c_timer3=0;
			f_timer3();
   102cc:	00101ac1 	jmpi	101ac <f_timer3>

000102d0 <setup>:
}

//5= 110 1101 => hexadecimal = 0x6d
//1= 000 0110 => hexadecimal = 0x06
void setup(void){
	max_timer1 = 1000;
   102d0:	0080fa04 	movi	r2,1000
   102d4:	d0a0080d 	sth	r2,-32736(gp)
	max_timer2 = 50;
   102d8:	00800c84 	movi	r2,50
   102dc:	d0a0078d 	sth	r2,-32738(gp)
	max_timer3 = 500;
   102e0:	00807d04 	movi	r2,500
   102e4:	d0a0068d 	sth	r2,-32742(gp)
	//LAT(HEX5_AVSB_BASE, 0x6d);
	//LAT(HEX4_AVSB_BASE, 0x06);
	LAT(HEX5_AVSB_BASE, 0x00);
   102e8:	008000b4 	movhi	r2,2
   102ec:	10841c04 	addi	r2,r2,4208
   102f0:	10000035 	stwio	zero,0(r2)
	LAT(HEX4_AVSB_BASE, 0x5b);
   102f4:	00c016c4 	movi	r3,91
   102f8:	10bffc04 	addi	r2,r2,-16
   102fc:	10c00035 	stwio	r3,0(r2)


}
   10300:	f800283a 	ret

00010304 <loop>:

void loop(void){
   10304:	deffff04 	addi	sp,sp,-4
   10308:	dfc00015 	stw	ra,0(sp)
	f_timers();
   1030c:	001024c0 	call	1024c <f_timers>
	usleep(1000);
   10310:	0100fa04 	movi	r4,1000
}
   10314:	dfc00017 	ldw	ra,0(sp)
   10318:	dec00104 	addi	sp,sp,4

}

void loop(void){
	f_timers();
	usleep(1000);
   1031c:	00103ec1 	jmpi	103ec <usleep>

00010320 <main>:
alt_u16 max_timer1, max_timer2, max_timer3;
alt_u8 sw, key, ledr, ledg;
alt_u8 estado=2, dz=0, un=0;

int main()
{ 
   10320:	deffff04 	addi	sp,sp,-4
   10324:	dfc00015 	stw	ra,0(sp)
  setup();
   10328:	00102d00 	call	102d0 <setup>

  while (1)loop();
   1032c:	00103040 	call	10304 <loop>
   10330:	003ffe06 	br	1032c <main+0xc>

00010334 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10334:	2900051e 	bne	r5,r4,1034c <alt_load_section+0x18>
   10338:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   1033c:	20800017 	ldw	r2,0(r4)
   10340:	21000104 	addi	r4,r4,4
   10344:	28800015 	stw	r2,0(r5)
   10348:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1034c:	29bffb1e 	bne	r5,r6,1033c <alt_load_section+0x8>
   10350:	f800283a 	ret

00010354 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10354:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10358:	01000074 	movhi	r4,1
   1035c:	21018f04 	addi	r4,r4,1596
   10360:	01400074 	movhi	r5,1
   10364:	29418d04 	addi	r5,r5,1588
   10368:	01800074 	movhi	r6,1
   1036c:	31818f04 	addi	r6,r6,1596
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10370:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   10374:	00103340 	call	10334 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10378:	01000074 	movhi	r4,1
   1037c:	21000804 	addi	r4,r4,32
   10380:	01400074 	movhi	r5,1
   10384:	29400804 	addi	r5,r5,32
   10388:	01800074 	movhi	r6,1
   1038c:	31800804 	addi	r6,r6,32
   10390:	00103340 	call	10334 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   10394:	01000074 	movhi	r4,1
   10398:	21018d04 	addi	r4,r4,1588
   1039c:	01400074 	movhi	r5,1
   103a0:	29418d04 	addi	r5,r5,1588
   103a4:	01800074 	movhi	r6,1
   103a8:	31818d04 	addi	r6,r6,1588
   103ac:	00103340 	call	10334 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   103b0:	00104a00 	call	104a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   103b4:	dfc00017 	ldw	ra,0(sp)
   103b8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   103bc:	00104a41 	jmpi	104a4 <alt_icache_flush_all>

000103c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103c0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103c4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   103c8:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   103cc:	00103f40 	call	103f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   103d0:	00103f00 	call	103f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   103d4:	d1200a17 	ldw	r4,-32728(gp)
   103d8:	d1600b17 	ldw	r5,-32724(gp)
   103dc:	d1a00c17 	ldw	r6,-32720(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   103e0:	dfc00017 	ldw	ra,0(sp)
   103e4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   103e8:	00103201 	jmpi	10320 <main>

000103ec <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   103ec:	00104141 	jmpi	10414 <alt_busy_sleep>

000103f0 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_AVSB, jtag_uart_avsb);
}
   103f0:	f800283a 	ret

000103f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   103f4:	deffff04 	addi	sp,sp,-4
   103f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_AVSB, nios2_qsys_avsb);
   103fc:	00104a80 	call	104a8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10400:	00800044 	movi	r2,1
   10404:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10408:	dfc00017 	ldw	ra,0(sp)
   1040c:	dec00104 	addi	sp,sp,4
   10410:	f800283a 	ret

00010414 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10414:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10418:	014666b4 	movhi	r5,6554
   1041c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10420:	dc000015 	stw	r16,0(sp)
   10424:	dfc00115 	stw	ra,4(sp)
   10428:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1042c:	00105ec0 	call	105ec <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10430:	10001126 	beq	r2,zero,10478 <alt_busy_sleep+0x64>
   10434:	0007883a 	mov	r3,zero
   10438:	01200034 	movhi	r4,32768
   1043c:	213fffc4 	addi	r4,r4,-1
   10440:	017999b4 	movhi	r5,58982
   10444:	295999c4 	addi	r5,r5,26215
   10448:	00000406 	br	1045c <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1044c:	213fffc4 	addi	r4,r4,-1
   10450:	203ffe1e 	bne	r4,zero,1044c <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10454:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10458:	18c00044 	addi	r3,r3,1
   1045c:	18bffb16 	blt	r3,r2,1044c <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10460:	8009883a 	mov	r4,r16
   10464:	01400144 	movi	r5,5
   10468:	00105fc0 	call	105fc <__mulsi3>
   1046c:	10bfffc4 	addi	r2,r2,-1
   10470:	103ffe1e 	bne	r2,zero,1046c <alt_busy_sleep+0x58>
   10474:	00000506 	br	1048c <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10478:	8009883a 	mov	r4,r16
   1047c:	01400144 	movi	r5,5
   10480:	00105fc0 	call	105fc <__mulsi3>
   10484:	10bfffc4 	addi	r2,r2,-1
   10488:	00bffe16 	blt	zero,r2,10484 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   1048c:	0005883a 	mov	r2,zero
   10490:	dfc00117 	ldw	ra,4(sp)
   10494:	dc000017 	ldw	r16,0(sp)
   10498:	dec00204 	addi	sp,sp,8
   1049c:	f800283a 	ret

000104a0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   104a0:	f800283a 	ret

000104a4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   104a4:	f800283a 	ret

000104a8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   104a8:	000170fa 	wrctl	ienable,zero
}
   104ac:	f800283a 	ret

000104b0 <udivmodsi4>:
   104b0:	29001b2e 	bgeu	r5,r4,10520 <udivmodsi4+0x70>
   104b4:	28001a16 	blt	r5,zero,10520 <udivmodsi4+0x70>
   104b8:	00800044 	movi	r2,1
   104bc:	0007883a 	mov	r3,zero
   104c0:	01c007c4 	movi	r7,31
   104c4:	00000306 	br	104d4 <udivmodsi4+0x24>
   104c8:	19c01326 	beq	r3,r7,10518 <udivmodsi4+0x68>
   104cc:	18c00044 	addi	r3,r3,1
   104d0:	28000416 	blt	r5,zero,104e4 <udivmodsi4+0x34>
   104d4:	294b883a 	add	r5,r5,r5
   104d8:	1085883a 	add	r2,r2,r2
   104dc:	293ffa36 	bltu	r5,r4,104c8 <udivmodsi4+0x18>
   104e0:	10000d26 	beq	r2,zero,10518 <udivmodsi4+0x68>
   104e4:	0007883a 	mov	r3,zero
   104e8:	21400236 	bltu	r4,r5,104f4 <udivmodsi4+0x44>
   104ec:	2149c83a 	sub	r4,r4,r5
   104f0:	1886b03a 	or	r3,r3,r2
   104f4:	1004d07a 	srli	r2,r2,1
   104f8:	280ad07a 	srli	r5,r5,1
   104fc:	103ffa1e 	bne	r2,zero,104e8 <udivmodsi4+0x38>
   10500:	30000226 	beq	r6,zero,1050c <udivmodsi4+0x5c>
   10504:	2005883a 	mov	r2,r4
   10508:	f800283a 	ret
   1050c:	1809883a 	mov	r4,r3
   10510:	2005883a 	mov	r2,r4
   10514:	f800283a 	ret
   10518:	0007883a 	mov	r3,zero
   1051c:	003ff806 	br	10500 <udivmodsi4+0x50>
   10520:	00800044 	movi	r2,1
   10524:	0007883a 	mov	r3,zero
   10528:	003fef06 	br	104e8 <udivmodsi4+0x38>

0001052c <__divsi3>:
   1052c:	defffe04 	addi	sp,sp,-8
   10530:	dc000015 	stw	r16,0(sp)
   10534:	dfc00115 	stw	ra,4(sp)
   10538:	0021883a 	mov	r16,zero
   1053c:	20000c16 	blt	r4,zero,10570 <__divsi3+0x44>
   10540:	000d883a 	mov	r6,zero
   10544:	28000e16 	blt	r5,zero,10580 <__divsi3+0x54>
   10548:	00104b00 	call	104b0 <udivmodsi4>
   1054c:	1007883a 	mov	r3,r2
   10550:	8005003a 	cmpeq	r2,r16,zero
   10554:	1000011e 	bne	r2,zero,1055c <__divsi3+0x30>
   10558:	00c7c83a 	sub	r3,zero,r3
   1055c:	1805883a 	mov	r2,r3
   10560:	dfc00117 	ldw	ra,4(sp)
   10564:	dc000017 	ldw	r16,0(sp)
   10568:	dec00204 	addi	sp,sp,8
   1056c:	f800283a 	ret
   10570:	0109c83a 	sub	r4,zero,r4
   10574:	04000044 	movi	r16,1
   10578:	000d883a 	mov	r6,zero
   1057c:	283ff20e 	bge	r5,zero,10548 <__divsi3+0x1c>
   10580:	014bc83a 	sub	r5,zero,r5
   10584:	8021003a 	cmpeq	r16,r16,zero
   10588:	003fef06 	br	10548 <__divsi3+0x1c>

0001058c <__modsi3>:
   1058c:	deffff04 	addi	sp,sp,-4
   10590:	dfc00015 	stw	ra,0(sp)
   10594:	01800044 	movi	r6,1
   10598:	2807883a 	mov	r3,r5
   1059c:	20000416 	blt	r4,zero,105b0 <__modsi3+0x24>
   105a0:	28000c16 	blt	r5,zero,105d4 <__modsi3+0x48>
   105a4:	dfc00017 	ldw	ra,0(sp)
   105a8:	dec00104 	addi	sp,sp,4
   105ac:	00104b01 	jmpi	104b0 <udivmodsi4>
   105b0:	0109c83a 	sub	r4,zero,r4
   105b4:	28000b16 	blt	r5,zero,105e4 <__modsi3+0x58>
   105b8:	180b883a 	mov	r5,r3
   105bc:	01800044 	movi	r6,1
   105c0:	00104b00 	call	104b0 <udivmodsi4>
   105c4:	0085c83a 	sub	r2,zero,r2
   105c8:	dfc00017 	ldw	ra,0(sp)
   105cc:	dec00104 	addi	sp,sp,4
   105d0:	f800283a 	ret
   105d4:	014bc83a 	sub	r5,zero,r5
   105d8:	dfc00017 	ldw	ra,0(sp)
   105dc:	dec00104 	addi	sp,sp,4
   105e0:	00104b01 	jmpi	104b0 <udivmodsi4>
   105e4:	0147c83a 	sub	r3,zero,r5
   105e8:	003ff306 	br	105b8 <__modsi3+0x2c>

000105ec <__udivsi3>:
   105ec:	000d883a 	mov	r6,zero
   105f0:	00104b01 	jmpi	104b0 <udivmodsi4>

000105f4 <__umodsi3>:
   105f4:	01800044 	movi	r6,1
   105f8:	00104b01 	jmpi	104b0 <udivmodsi4>

000105fc <__mulsi3>:
   105fc:	20000a26 	beq	r4,zero,10628 <__mulsi3+0x2c>
   10600:	0007883a 	mov	r3,zero
   10604:	2080004c 	andi	r2,r4,1
   10608:	1005003a 	cmpeq	r2,r2,zero
   1060c:	2008d07a 	srli	r4,r4,1
   10610:	1000011e 	bne	r2,zero,10618 <__mulsi3+0x1c>
   10614:	1947883a 	add	r3,r3,r5
   10618:	294b883a 	add	r5,r5,r5
   1061c:	203ff91e 	bne	r4,zero,10604 <__mulsi3+0x8>
   10620:	1805883a 	mov	r2,r3
   10624:	f800283a 	ret
   10628:	0007883a 	mov	r3,zero
   1062c:	1805883a 	mov	r2,r3
   10630:	f800283a 	ret
