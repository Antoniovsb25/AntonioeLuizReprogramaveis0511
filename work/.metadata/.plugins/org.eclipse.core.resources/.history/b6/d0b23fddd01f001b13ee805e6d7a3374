#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <unistd.h>
//Comandos para leitura e escrita nas portas IO
#define PORT(base) 		IORD_ALTERA_AVALON_PIO_DATA(base)
#define LAT(base, data) IOWR_ALTERA_AVALON_PIO_DATA(base, data)

void setup(void);
void loop(void);
void f_timers(void);
void f_timer1(void);
void f_timer2(void);
void f_timer3(void);


alt_u16 max_timer1, max_timer2, max_timer3;
alt_u8 sw, key, ledr, ledg;
alt_u8 estado=2, dz=0, un=0;

int main()
{ 
  setup();

  while (1)loop();

  return 0;
}

//5= 110 1101 => hexadecimal = 0x6d
//1= 000 0110 => hexadecimal = 0x06
void setup(void){
	max_timer1 = 2000;
	max_timer2 = 50;
	max_timer3 = 500;
	//LAT(HEX5_AVSB_BASE, 0x6d);
	//LAT(HEX4_AVSB_BASE, 0x06);
	LAT(HEX5_AVSB_BASE, 0x00);
	LAT(HEX4_AVSB_BASE, 0x5d);


}

void loop(void){
	f_timers();
	usleep(10000);
}

void f_timers(void){
	static alt_u16 c_timer1=0, c_timer2=0, c_timer3=0;
	if (c_timer1<max_timer1){
		c_timer1++;
	} else{
		c_timer1=0;
		f_timer1();
	}
	if (c_timer2<max_timer2){
			c_timer2++;
		} else{
			c_timer2=0;
			f_timer2();
		}
	if (c_timer3<max_timer3){
			c_timer3++;
		} else{
			c_timer3=0;
			f_timer3();
		}
}

void f_timer1(void){
	estado = f_maq(estado);
	//sw = PORT(SW_AVSB_BASE);
	//ledr = sw;
	//LAT(LEDR_AVSB_BASE, ledr);
	LAT(HEX5_AVSB_BASE, dz);
	LAT(HEX4_AVSB_BASE, un);
}

void f_timer2(void){
	static alt_u8 contador = 0;
	if(contador<100){
		contador++;
	}else{
		contador = 0;
	}
	ledg = contador;
	LAT(LEDG_AVSB_BASE, ledg);
}

void f_timer3(void){
	sw = PORT(SW_AVSB_BASE);
	ledr = sw;
	LAT(LEDR_AVSB_BASE, ledr);
}

void f_maq(alt_u8 atual){
	alt_u8 prox_est;
	switch(atual){
	case 2:
			prox_est = 3;
			un = 0x4f;
			dz = 0x00;
			break;

		case 3:
				prox_est = 5;
				un = 0x00;
				dz = 0x6d;
				break;

		case 5:
				prox_est = 7;
				un = 0x00;
				dz = 0x07;
				break;
		case 7:
				prox_est = 11;
				un = 0x06;
				dz = 0x06;
				break;
		case 11:
				prox_est = 13;
				un = 0x4f;
				dz = 0x06;
				break;
		case 13:
				prox_est = 17;
				un = 0x07;
				dz = 0x06;
				break;
		case 17:
				prox_est = 19;
				un = 0x6f;
				dz = 0x06;
				break;
		case 19:
				prox_est = 23;
				un = 0x4f;
				dz = 0x5b;
				break;
		case 23:
				prox_est = 29;
				un = 0x6f;
				dz = 0x5b;
				break;
		case 29:
				prox_est = 2;
				un = 0x5b;
				dz = 0x00;
				break;

		default:
			prox_est = 2;
			un = 0x5b;
			dz = 0x00;
		}


}
